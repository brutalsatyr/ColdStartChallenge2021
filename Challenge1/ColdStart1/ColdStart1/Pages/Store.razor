@page "/store"
@using ColdStart1App.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject HttpClient Http
@inject IJSRuntime JS;
@inject IWebAssemblyHostEnvironment HostEnvironment

<h1>Store</h1>

<div style="text-align:center">
    @if (Catalog != null && Catalog.icecreams != null && Catalog.icecreams.Any())
    {
        if (RecommendedItem != null)
        {
            <h2> Recommended </h2>

            <MudCard>
                <img src="@RecommendedItem.ImageUrl" height="100"/>
                
                <MudCardContent>
                    <MudText Typo="Typo.h5">@RecommendedItem.Name</MudText>
                    <MudText Typo="Typo.body2">@RecommendedItem.Description</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="align-self:center" @onclick="()=> PreOrderIceCreamAsync(RecommendedItem.Id)">Pre-Order</MudButton>
                </MudCardActions>
            </MudCard>
        }

        <h2> Store </h2>

        @foreach (var catalogItem in Catalog.icecreams)
        {
            <MudCard>
                <img src="@catalogItem.ImageUrl" height="100" />
                <MudCardContent>
                    <MudText Typo="Typo.h5">@catalogItem.Name</MudText>
                    <MudText Typo="Typo.body2">@catalogItem.Description</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="align-self:center" @onclick="()=> PreOrderIceCreamAsync(catalogItem.Id)">Pre-Order</MudButton>
                </MudCardActions>
            </MudCard>
        }
    }
    else
    {
        <MudCard>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
            <MudCardContent>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="30px" Height="41px" />
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" />
            </MudCardContent>
        </MudCard>

    }

    <h5 style="color:red">
        @ErrorMessage
    </h5>

    <h5 style="color:green">
        @SuccessMessage
    </h5>

</div>
@code {
    private Catalog Catalog;
    private string ErrorMessage = "";
    private string SuccessMessage = "";
    private CatalogItem RecommendedItem;
    private string PersonalizerEventId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Catalog = await Http.GetFromJsonAsync<Catalog>("/api/CatalogItems");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            ErrorMessage = $"An error happened when retrieving the catalog: {ex.Message}";
        }
        await GetRecommended();
    }

    private async Task GetRecommended()
    {
        try
        {
            var user = await GetUserAsync();
            var recommendationRequest = new RecommendationRequest
            {
                Catalogitems = Catalog.icecreams,
                UserName = user.UserDetails
            };

            var response= await Http.PostAsJsonAsync("/api/Recommendation", recommendationRequest);

            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = "The preorder was not successfull";
            }
            else
            {
                var recommendedResponse = await response.Content.ReadFromJsonAsync<RecommendationResponse>();
                RecommendedItem = Catalog.icecreams.FirstOrDefault(x => x.Id == recommendedResponse.PrefferedItemId);
                PersonalizerEventId = recommendedResponse.eventId;
                this.StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
            ErrorMessage = $"An error happened when retrieving recommened item: {ex.Message}";
        }
    }

    private async Task PreOrderIceCreamAsync(int icecreamId)
    {

        try
        {
            var user = await GetUserAsync();
            ErrorMessage = "";
            SuccessMessage = "";

            if (user != null)
            {
                Console.WriteLine($"user:  {user.UserDetails}, icecreamid:{icecreamId}");
                var preOrder = new Preorder(user.UserDetails, icecreamId);

                var request = new SendIceCreamOrderRequest
                {
                    Preorder = preOrder,
                    IsRecommended = RecommendedItem.Id == icecreamId,
                    EventId = PersonalizerEventId

                };

                var response = await Http.PostAsJsonAsync("/api/SendIceCreamOrders", request);
                if (!response.IsSuccessStatusCode)
                {
                    ErrorMessage = "The preorder was not successfull";
                }
                else
                {
                    SuccessMessage = $"Preorder of {Catalog.icecreams.FirstOrDefault(x=>x.Id== icecreamId).Name} has been sent";
                }
            }
            else
            {
                throw new Exception("If the user is not logged in, you cannot preorder the icecream");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            ErrorMessage = $"An error happened when preordering the icecream: {ex.Message}";
        }

        await GetRecommended();
    }

    private async Task<ClientPrincipal> GetUserAsync()
    {
        var user = await JS.InvokeAsync<ClientPrincipal>("getUserInfo");

        if (HostEnvironment.IsDevelopment())
        {
            user = new ClientPrincipal
            {
                UserDetails = "TestUser"
            };
        }
        return user;
    }
}
