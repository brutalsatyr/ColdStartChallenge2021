@page "/store"
@using ColdStart1App.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject HttpClient Http
@inject IJSRuntime JS;
@inject IWebAssemblyHostEnvironment HostEnvironment

<h1>Store</h1>

<div style="text-align:center">
    @if (catalog != null && catalog.icecreams != null && catalog.icecreams.Any())
    {

        @foreach (var catalogItem in catalog.icecreams)
        {
            <MudCard>
                <MudCardMedia Height="100" Image="@catalogItem.ImageUrl" />
                <MudCardContent>
                    <MudText Typo="Typo.h5">@catalogItem.Name</MudText>
                    <MudText Typo="Typo.body2">@catalogItem.Description</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="align-self:center" @onclick="()=> PreOrderIceCream(catalogItem.Id)">Pre-Order</MudButton>
                </MudCardActions>
            </MudCard>
        }
    }
    else
    {
        <MudCard>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
            <MudCardContent>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="30px" Height="41px" />
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" />
            </MudCardContent>
        </MudCard>

    }

    @if (ErrorMessage != null)
    {
        <h5 style="color:red">
            @ErrorMessage
        </h5>
    }
</div>
@code {
    private Catalog catalog;
    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            catalog = await Http.GetFromJsonAsync<Catalog>("/api/CatalogItems");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            ErrorMessage = $"An error happened when retrieving the catalog {ex.Message}";
        }
    }

    private async Task PreOrderIceCream(int icecreamId)
    {

        try
        {
            var user = await JS.InvokeAsync<ClientPrincipal>("getUserInfo");

            if (HostEnvironment.IsDevelopment())
            {
                user = new ClientPrincipal
                {
                    UserDetails = "TestUser"
                };
            }


            if (user != null)
            {
                Console.WriteLine($"user:  {user.UserDetails}, icecreamid:{icecreamId}");
                Console.WriteLine(Environment.GetEnvironmentVariable("AzureQueueStorage", EnvironmentVariableTarget.Process);)
                var preOrder = new Preorder(user.UserDetails, icecreamId);
                var response = await Http.PostAsJsonAsync("/api/SendIceCreamOrders", preOrder);
                if (!response.IsSuccessStatusCode)
                {
                    ErrorMessage = "The preorder was not successfull";
                }
            }
            else
            {
                throw new Exception("If the user is not logged in, you cannot preorder the icecream");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            ErrorMessage = $"An error happened when preordering the icecream: {ex.Message}";
        }
    }
}
